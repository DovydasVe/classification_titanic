{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c893d144",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-01T20:35:18.208084Z",
     "iopub.status.busy": "2025-07-01T20:35:18.207707Z",
     "iopub.status.idle": "2025-07-01T20:35:22.226185Z",
     "shell.execute_reply": "2025-07-01T20:35:22.225299Z"
    },
    "papermill": {
     "duration": 4.023869,
     "end_time": "2025-07-01T20:35:22.227632",
     "exception": false,
     "start_time": "2025-07-01T20:35:18.203763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import GridSearchCV, train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "df = pd.read_csv('/kaggle/input/titanic/train.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1f50670",
   "metadata": {
    "papermill": {
     "duration": 0.00214,
     "end_time": "2025-07-01T20:35:22.232920",
     "exception": false,
     "start_time": "2025-07-01T20:35:22.230780",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "eb768390",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T20:35:22.238733Z",
     "iopub.status.busy": "2025-07-01T20:35:22.238398Z",
     "iopub.status.idle": "2025-07-01T20:35:22.263480Z",
     "shell.execute_reply": "2025-07-01T20:35:22.262340Z"
    },
    "papermill": {
     "duration": 0.029877,
     "end_time": "2025-07-01T20:35:22.265082",
     "exception": false,
     "start_time": "2025-07-01T20:35:22.235205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Leftover NA values: 0\n",
      "   Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n",
      "0         0       3    1  22.0      1      0   7.2500         2\n",
      "1         1       1    0  38.0      1      0  71.2833         0\n",
      "2         1       3    0  26.0      0      0   7.9250         2\n",
      "3         1       1    0  35.0      1      0  53.1000         2\n",
      "4         0       3    1  35.0      0      0   8.0500         2\n"
     ]
    }
   ],
   "source": [
    "df['Age'] = df['Age'].fillna(df['Age'].median())\n",
    "df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])\n",
    "df = df.drop(columns=['Cabin', 'Ticket', 'PassengerId', 'Name'], errors='ignore')\n",
    "\n",
    "print(f'Leftover NA values: {sum(df.isnull().sum())}')\n",
    "\n",
    "le_sex = LabelEncoder()\n",
    "le_embarked = LabelEncoder()\n",
    "df['Sex'] = le_sex.fit_transform(df['Sex'])\n",
    "df['Embarked'] = le_embarked.fit_transform(df['Embarked'])\n",
    "\n",
    "print(df.head())\n",
    "\n",
    "X = df.drop(columns=['Survived'], errors='ignore')\n",
    "y = df['Survived']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef70942b",
   "metadata": {
    "papermill": {
     "duration": 0.002422,
     "end_time": "2025-07-01T20:35:22.270175",
     "exception": false,
     "start_time": "2025-07-01T20:35:22.267753",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Single Decision Tree model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e801a5fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T20:35:22.276509Z",
     "iopub.status.busy": "2025-07-01T20:35:22.275749Z",
     "iopub.status.idle": "2025-07-01T20:35:22.883058Z",
     "shell.execute_reply": "2025-07-01T20:35:22.882244Z"
    },
    "papermill": {
     "duration": 0.611887,
     "end_time": "2025-07-01T20:35:22.884537",
     "exception": false,
     "start_time": "2025-07-01T20:35:22.272650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth 1: CV Accuracy = 0.787\n",
      "Depth 2: CV Accuracy = 0.773\n",
      "Depth 3: CV Accuracy = 0.809\n",
      "Depth 4: CV Accuracy = 0.805\n",
      "Depth 5: CV Accuracy = 0.811\n",
      "Depth 6: CV Accuracy = 0.813\n",
      "Depth 7: CV Accuracy = 0.807\n",
      "Depth 8: CV Accuracy = 0.814\n",
      "Depth 9: CV Accuracy = 0.808\n",
      "Depth 10: CV Accuracy = 0.808\n",
      "Depth 11: CV Accuracy = 0.797\n",
      "Depth 12: CV Accuracy = 0.795\n",
      "Depth 13: CV Accuracy = 0.786\n",
      "Depth 14: CV Accuracy = 0.794\n",
      "Depth 15: CV Accuracy = 0.789\n",
      "Depth 16: CV Accuracy = 0.783\n",
      "Depth 17: CV Accuracy = 0.780\n",
      "Depth 18: CV Accuracy = 0.773\n",
      "Depth 19: CV Accuracy = 0.778\n",
      "Depth 20: CV Accuracy = 0.774\n",
      "Best depth: 8 with CV accuracy 0.814\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=8, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=8, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(max_depth=8, random_state=42)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_depth = None\n",
    "best_score = 0\n",
    "\n",
    "for depth in range(1, 21):\n",
    "    model = DecisionTreeClassifier(max_depth=depth, random_state=42)\n",
    "    scores = cross_val_score(model, X, y, cv=5, scoring='accuracy')\n",
    "    mean_score = scores.mean()\n",
    "    print(f'Depth {depth}: CV Accuracy = {mean_score:.3f}')\n",
    "    if mean_score > best_score:\n",
    "        best_score = mean_score\n",
    "        best_depth = depth\n",
    "\n",
    "print(f'Best depth: {best_depth} with CV accuracy {best_score:.3f}')\n",
    "\n",
    "model = DecisionTreeClassifier(max_depth=8, random_state=42)\n",
    "model.fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70c8f96e",
   "metadata": {
    "papermill": {
     "duration": 0.002561,
     "end_time": "2025-07-01T20:35:22.890141",
     "exception": false,
     "start_time": "2025-07-01T20:35:22.887580",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Random Forest model (bagged decision tree) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "21fb8fbd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T20:35:22.897342Z",
     "iopub.status.busy": "2025-07-01T20:35:22.896411Z",
     "iopub.status.idle": "2025-07-01T20:37:14.772796Z",
     "shell.execute_reply": "2025-07-01T20:37:14.771810Z"
    },
    "papermill": {
     "duration": 111.883847,
     "end_time": "2025-07-01T20:37:14.776645",
     "exception": false,
     "start_time": "2025-07-01T20:35:22.892798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best params: {'max_depth': 8, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 100}\n",
      "Best CV accuracy: 0.8329\n",
      "Test Accuracy: 0.793\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "rf = RandomForestClassifier(random_state=42)\n",
    "\n",
    "param_grid = {\n",
    "    'n_estimators': [100, 200, 300],\n",
    "    'max_depth': [4, 6, 8, 10, 12],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4],\n",
    "    'max_features': ['sqrt', 'log2']\n",
    "}\n",
    "\n",
    "grid_search = GridSearchCV(rf, param_grid, cv=3, scoring='accuracy', n_jobs=-1)\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "best_params = grid_search.best_params_\n",
    "print(f\"Best params: {best_params}\")\n",
    "print(f\"Best CV accuracy: {grid_search.best_score_:.4f}\")\n",
    "\n",
    "best_rf = grid_search.best_estimator_\n",
    "y_pred = best_rf.predict(X_test)\n",
    "print(f'Test Accuracy: {accuracy_score(y_test, y_pred):.3f}')\n",
    "\n",
    "rf_model = RandomForestClassifier(**best_params, random_state=42).fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21c68c7f",
   "metadata": {
    "papermill": {
     "duration": 0.002536,
     "end_time": "2025-07-01T20:37:14.782152",
     "exception": false,
     "start_time": "2025-07-01T20:37:14.779616",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Making a submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "03d3bad0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-01T20:37:14.789071Z",
     "iopub.status.busy": "2025-07-01T20:37:14.788405Z",
     "iopub.status.idle": "2025-07-01T20:37:14.832622Z",
     "shell.execute_reply": "2025-07-01T20:37:14.831916Z"
    },
    "papermill": {
     "duration": 0.049411,
     "end_time": "2025-07-01T20:37:14.834210",
     "exception": false,
     "start_time": "2025-07-01T20:37:14.784799",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df = pd.read_csv('/kaggle/input/titanic/test.csv')\n",
    "test_df['Age'] = test_df['Age'].fillna(df['Age'].median())\n",
    "test_df['Fare'] = test_df['Fare'].fillna(df['Fare'].median())\n",
    "test_df['Embarked'] = test_df['Embarked'].fillna(df['Embarked'].mode()[0])\n",
    "\n",
    "test_df = test_df.drop(columns=['Cabin', 'Ticket', 'Name'], errors='ignore')\n",
    "test_df['Sex'] = le_sex.transform(test_df['Sex'])\n",
    "test_df['Embarked'] = le_embarked.transform(test_df['Embarked'])\n",
    "\n",
    "test_set_X = test_df.drop(columns=['PassengerId'])\n",
    "passenger_ids = test_df['PassengerId']\n",
    "\n",
    "predictions = rf_model.predict(test_set_X)\n",
    "\n",
    "submission = pd.DataFrame({\n",
    "    'PassengerId': passenger_ids,\n",
    "    'Survived': predictions\n",
    "})\n",
    "\n",
    "submission.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 26502,
     "sourceId": 3136,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 123.770369,
   "end_time": "2025-07-01T20:37:17.457024",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-01T20:35:13.686655",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
