{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a4fe93c7",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-30T16:39:52.736287Z",
     "iopub.status.busy": "2025-06-30T16:39:52.735975Z",
     "iopub.status.idle": "2025-06-30T16:39:57.692258Z",
     "shell.execute_reply": "2025-06-30T16:39:57.691045Z"
    },
    "papermill": {
     "duration": 4.961834,
     "end_time": "2025-06-30T16:39:57.694002",
     "exception": false,
     "start_time": "2025-06-30T16:39:52.732168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn import metrics\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "df = pd.read_csv('/kaggle/input/titanic/train.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82d04cbb",
   "metadata": {
    "papermill": {
     "duration": 0.00198,
     "end_time": "2025-06-30T16:39:57.698779",
     "exception": false,
     "start_time": "2025-06-30T16:39:57.696799",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f6d973f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-30T16:39:57.705124Z",
     "iopub.status.busy": "2025-06-30T16:39:57.704771Z",
     "iopub.status.idle": "2025-06-30T16:39:57.731683Z",
     "shell.execute_reply": "2025-06-30T16:39:57.730740Z"
    },
    "papermill": {
     "duration": 0.032072,
     "end_time": "2025-06-30T16:39:57.733223",
     "exception": false,
     "start_time": "2025-06-30T16:39:57.701151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Leftover NA values: 0\n",
      "   Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n",
      "0         0       3    1  22.0      1      0   7.2500         2\n",
      "1         1       1    0  38.0      1      0  71.2833         0\n",
      "2         1       3    0  26.0      0      0   7.9250         2\n",
      "3         1       1    0  35.0      1      0  53.1000         2\n",
      "4         0       3    1  35.0      0      0   8.0500         2\n"
     ]
    }
   ],
   "source": [
    "df['Age'] = df['Age'].fillna(df['Age'].median())\n",
    "df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])\n",
    "df = df.drop(columns=['Cabin', 'Ticket', 'PassengerId', 'Name'], errors='ignore')\n",
    "\n",
    "print(f'Leftover NA values: {sum(df.isnull().sum())}')\n",
    "\n",
    "le_sex = LabelEncoder()\n",
    "le_embarked = LabelEncoder()\n",
    "df['Sex'] = le_sex.fit_transform(df['Sex'])\n",
    "df['Embarked'] = le_embarked.fit_transform(df['Embarked'])\n",
    "\n",
    "print(df.head())\n",
    "\n",
    "X = df.drop(columns=['Survived'], errors='ignore')\n",
    "y = df['Survived']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdfbdcdb",
   "metadata": {
    "papermill": {
     "duration": 0.002117,
     "end_time": "2025-06-30T16:39:57.738307",
     "exception": false,
     "start_time": "2025-06-30T16:39:57.736190",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Decision tree model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "10ce864a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-30T16:39:57.744988Z",
     "iopub.status.busy": "2025-06-30T16:39:57.744444Z",
     "iopub.status.idle": "2025-06-30T16:39:58.377161Z",
     "shell.execute_reply": "2025-06-30T16:39:58.375589Z"
    },
    "papermill": {
     "duration": 0.638255,
     "end_time": "2025-06-30T16:39:58.378930",
     "exception": false,
     "start_time": "2025-06-30T16:39:57.740675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth 1: CV Accuracy = 0.790\n",
      "Depth 2: CV Accuracy = 0.782\n",
      "Depth 3: CV Accuracy = 0.820\n",
      "Depth 4: CV Accuracy = 0.811\n",
      "Depth 5: CV Accuracy = 0.809\n",
      "Depth 6: CV Accuracy = 0.814\n",
      "Depth 7: CV Accuracy = 0.810\n",
      "Depth 8: CV Accuracy = 0.821\n",
      "Depth 9: CV Accuracy = 0.821\n",
      "Depth 10: CV Accuracy = 0.821\n",
      "Depth 11: CV Accuracy = 0.809\n",
      "Depth 12: CV Accuracy = 0.813\n",
      "Depth 13: CV Accuracy = 0.803\n",
      "Depth 14: CV Accuracy = 0.804\n",
      "Depth 15: CV Accuracy = 0.799\n",
      "Depth 16: CV Accuracy = 0.799\n",
      "Depth 17: CV Accuracy = 0.800\n",
      "Depth 18: CV Accuracy = 0.800\n",
      "Depth 19: CV Accuracy = 0.798\n",
      "Depth 20: CV Accuracy = 0.799\n",
      "Best depth: 8 with CV accuracy 0.821\n",
      "Decision Trees's Accuracy:  0.8222222222222222\n"
     ]
    }
   ],
   "source": [
    "X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=0.1, stratify=y, random_state=42)\n",
    "\n",
    "best_depth = None\n",
    "best_score = 0\n",
    "\n",
    "for depth in range(1, 21):\n",
    "    model = DecisionTreeClassifier(max_depth=depth, random_state=42)\n",
    "    scores = cross_val_score(model, X_temp, y_temp, cv=5, scoring='accuracy')\n",
    "    mean_score = scores.mean()\n",
    "    print(f'Depth {depth}: CV Accuracy = {mean_score:.3f}')\n",
    "    if mean_score > best_score:\n",
    "        best_score = mean_score\n",
    "        best_depth = depth\n",
    "\n",
    "print(f'Best depth: {best_depth} with CV accuracy {best_score:.3f}')\n",
    "\n",
    "model = DecisionTreeClassifier(max_depth=8, random_state=42)\n",
    "model.fit(X_temp, y_temp)\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"Decision Trees's Accuracy: \", metrics.accuracy_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7e3338e",
   "metadata": {
    "papermill": {
     "duration": 0.002529,
     "end_time": "2025-06-30T16:39:58.384375",
     "exception": false,
     "start_time": "2025-06-30T16:39:58.381846",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Making a submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "157821d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-30T16:39:58.391184Z",
     "iopub.status.busy": "2025-06-30T16:39:58.390824Z",
     "iopub.status.idle": "2025-06-30T16:39:58.417226Z",
     "shell.execute_reply": "2025-06-30T16:39:58.416251Z"
    },
    "papermill": {
     "duration": 0.032941,
     "end_time": "2025-06-30T16:39:58.419902",
     "exception": false,
     "start_time": "2025-06-30T16:39:58.386961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_df = pd.read_csv('/kaggle/input/titanic/test.csv')\n",
    "test_df['Age'] = test_df['Age'].fillna(test_df['Age'].median())\n",
    "test_df['Fare'] = test_df['Fare'].fillna(test_df['Fare'].median())\n",
    "test_df['Embarked'] = test_df['Embarked'].fillna(test_df['Embarked'].mode()[0])\n",
    "\n",
    "test_df = test_df.drop(columns=['Cabin', 'Ticket', 'Name'], errors='ignore')\n",
    "test_df['Sex'] = le_sex.transform(test_df['Sex'])\n",
    "test_df['Embarked'] = le_embarked.transform(test_df['Embarked'])\n",
    "\n",
    "test_set_X = test_df.drop(columns=['PassengerId'])\n",
    "passenger_ids = test_df['PassengerId']\n",
    "\n",
    "predictions = model.predict(test_set_X)\n",
    "\n",
    "submission = pd.DataFrame({\n",
    "    'PassengerId': passenger_ids,\n",
    "    'Survived': predictions\n",
    "})\n",
    "\n",
    "submission.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 26502,
     "sourceId": 3136,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.728672,
   "end_time": "2025-06-30T16:39:59.347168",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-30T16:39:47.618496",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
